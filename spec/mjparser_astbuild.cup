package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.test.*;
import java.util.ArrayList;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	
    public ArrayList<CompilerError> listaSintaksnihGresaka = new ArrayList<CompilerError>();
	
	void dodajGresku(int line, String message) {
		listaSintaksnihGresaka.add(new CompilerError(line, message, CompilerError.CompilerErrorType.SYNTAX_ERROR));
	}
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
    


    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
    		msg.append (" na liniji ").append(((Symbol)info).left);
    		Symbol s = (Symbol) info;
    		if (s != null && s.value != null)
    			msg.append(": " + s.value.toString());
    	}
        log.error(msg.toString());
        dodajGresku(((Symbol)info).left, message);
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
    		msg.append (" na liniji ").append(((Symbol)info).left);
    		Symbol s = (Symbol) info;
    		if (s != null && s.value != null)
    			msg.append(": " + s.value.toString());
    	}
    	log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF, SWITCH, DO, WHILE, NEW;
terminal PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, CASE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQEQ, NOTEQ, GREATER, GREATEREQ, LESS;
terminal LESSEQ, ANDAND, OROR, EQ, PLUSPLUS, MINUSMINUS, SEMI, COMMA, DOT, LPAREN;
terminal RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, QUESTION, DOTDOT;
terminal Integer NUM;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Declarations Declarations;
nonterminal MethodDecl MethodDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal FormPars FormPars;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal ConstList ConstList;
nonterminal VarList VarList;
nonterminal FormParsList FormParsList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal CaseList CaseList;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal AddopTermList AddopTermList;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal BracketOption BracketOption;
nonterminal VarIdent VarIdent;
nonterminal FormPar FormPar;
nonterminal ConstIdent ConstIdent;
nonterminal OrOperator OrOperator;
nonterminal ThenZakrpi ThenZakrpi;
nonterminal ElseZakrpi ElseZakrpi;
nonterminal If1 If1;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program,Designator, MethodTypeName, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr1, Expr, Condition1, Then1, Else1;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact, CondTerm, Condition;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList ::= (DeclListMore) DeclList:D1 Declarations:D2 {: RESULT=new DeclListMore(D1, D2); RESULT.setLine(D1left); :} 
			|
			(NoDeclList) {: RESULT=new NoDeclList(); :} /* epsilon */
			;
			
MethodDeclList ::= (MethodDeclListMore) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListMore(M1, M2); RESULT.setLine(M1left); :}
			|
			(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :}/* epsilon */
			;
			
Declarations ::= (ConstDeclarations) ConstDecl:C1 {: RESULT=new ConstDeclarations(C1); RESULT.setLine(C1left); :} 
				| 
				(VarDeclarations) VarDecl:V1 {: RESULT=new VarDeclarations(V1); RESULT.setLine(V1left); :} 
				| 
				(ClassDeclarations) ClassDecl:C1 {: RESULT=new ClassDeclarations(C1); RESULT.setLine(C1left); :};
			
MethodDecl ::= (MethodDeclWithFormPars)	MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclWithFormPars(M1, F2, V3, S4); RESULT.setLine(M1left); :}
			|
			(MethodDeclWithoutFormPars) MethodTypeName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclWithoutFormPars(M1, V2, S3); RESULT.setLine(M1left); :}
			;

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

VarDecl ::= (VarDeclar) Type:T1 VarList:V2 SEMI {: RESULT=new VarDeclar(T1, V2); RESULT.setLine(T1left); :}
		|
		(VarDeclError) error:e {: parser.report_error("Greska pri definiciji tipa " + eleft + ". Izvrsen je oporavak od greske.", eleft);:} {: RESULT=new VarDeclError(); :}
		;
		

ClassDecl ::= (ClassDeclWithExtendsAndMethodDecl) CLASS IDENT:I1 EXTENDS Type:T2 LBRACE VarDeclList:V3 LBRACE MethodDeclList:M4 RBRACE RBRACE {: RESULT=new ClassDeclWithExtendsAndMethodDecl(I1, T2, V3, M4); RESULT.setLine(I1left); :}
			|
			(ClassDeclWithMethodDecl) CLASS IDENT:I1 LBRACE VarDeclList:V2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDeclWithMethodDecl(I1, V2, M3); RESULT.setLine(I1left); :}
			|
			(ClassDeclWithExtends) CLASS IDENT:I1 EXTENDS Type:T2 LBRACE VarDeclList:V3 RBRACE {: RESULT=new ClassDeclWithExtends(I1, T2, V3); RESULT.setLine(I1left); :}
			|
			(ClassDeclWithoutExtendsAndMethodDecl) CLASS IDENT:I1 LBRACE VarDeclList:V2 RBRACE {: RESULT=new ClassDeclWithoutExtendsAndMethodDecl(I1, V2); RESULT.setLine(I1left); :}
			;
			
MethodTypeName ::= (MethTypeName) Type:methType IDENT:methName {: RESULT=new MethTypeName(methType, methName); RESULT.setLine(methTypeleft); :} 
				|
				(MethVoidName) VOID IDENT:methName {: RESULT=new MethVoidName(methName); RESULT.setLine(methNameleft); :};

FormPars ::= (FormPars) FormParsList:F1 {: RESULT=new FormPars(F1); RESULT.setLine(F1left); :};

VarDeclList ::= (VarDeclListMore) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListMore(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
			;
			
StatementList ::= (StatementListMore) StatementList:S1 Statement:S2 {: RESULT=new StatementListMore(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;
				
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
		;	

ConstList ::= (ConstListMore) ConstList:C1 COMMA ConstIdent:C2 {: RESULT=new ConstListMore(C1, C2); RESULT.setLine(C1left); :}
			|
			(ConstListTerminate) ConstIdent:C1 {: RESULT=new ConstListTerminate(C1); RESULT.setLine(C1left); :}
			;

ConstIdent ::= (ConstNum) IDENT:constName EQ NUM:value {: RESULT=new ConstNum(constName, value); RESULT.setLine(constNameleft); :}
			|
			(ConstChar) IDENT:constName EQ CHAR:value {: RESULT=new ConstChar(constName, value); RESULT.setLine(constNameleft); :}
			|
			(ConstBool) IDENT:constName EQ BOOL:value {: RESULT=new ConstBool(constName, value); RESULT.setLine(constNameleft); :}
			;
			
VarList ::= (VarListMore) VarList:V1 COMMA VarIdent:V2 {: RESULT=new VarListMore(V1, V2); RESULT.setLine(V1left); :}
			|
			(VarListTerminate) VarIdent:V1 {: RESULT=new VarListTerminate(V1); RESULT.setLine(V1left); :}
			;
	
VarIdent ::= (VarIdentif) IDENT:varName BracketOption:bracketOption {: RESULT=new VarIdentif(varName, bracketOption); RESULT.setLine(varNameleft); :}
			|
			(VarIdentifError) error:e {: parser.report_error("Greska pri definiciji promenljive na liniji " + eleft + ". Izvrsen je oporavak od greske.", eleft);:} {: RESULT=new VarIdentifError(); :}
			 ;

			
BracketOption ::= (Brackets) LBRACKET RBRACKET {: RESULT=new Brackets(); :}
				|
				(NoBrackets) {: RESULT=new NoBrackets(); :} /* epsilon */
				;
			
FormParsList ::= (FormParsListMore) FormParsList:F1 COMMA FormPar:formPar {: RESULT=new FormParsListMore(F1, formPar); RESULT.setLine(F1left); :}
				|
				(FormParsListTerminate)FormPar:formPar {: RESULT=new FormParsListTerminate(formPar); RESULT.setLine(formParleft); :}
				;
				
FormPar ::= (FormPar) Type:type IDENT:name BracketOption:bracketOption {: RESULT=new FormPar(type, name, bracketOption); RESULT.setLine(typeleft); :};
				
Statement ::= (DesigStat) DesignatorStatement:D1 SEMI {: RESULT=new DesigStat(D1); RESULT.setLine(D1left); :}
			|
			(IfElseStat)If1:I1 LPAREN Condition:C2 RPAREN Then1:T3 Else1:E4 {: RESULT=new IfElseStat(I1, C2, T3, E4); RESULT.setLine(I1left); :}
			|
			//(IfStat) IF LPAREN Condition1 RPAREN Then1
			//|
			(DoWhileStat) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileStat(S1, C2); RESULT.setLine(S1left); :}
			|
			(SwitchCaseStat) SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE {: RESULT=new SwitchCaseStat(E1, C2); RESULT.setLine(E1left); :}
			|
			(BreakStat) BREAK {: RESULT=new BreakStat(); :}
			|
			(ContinueStat) CONTINUE {: RESULT=new ContinueStat(); :}
			|
			(ReturnStat) RETURN SEMI {: RESULT=new ReturnStat(); :}
			| 
			(ReturnExprStat) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprStat(E1); RESULT.setLine(E1left); :}
			|
			(ReadStat) READ LPAREN Designator:designator RPAREN SEMI {: RESULT=new ReadStat(designator); RESULT.setLine(designatorleft); :}
			|
			(PrintStat) PRINT LPAREN Expr:expr RPAREN SEMI {: RESULT=new PrintStat(expr); RESULT.setLine(exprleft); :}
			|
			(PrintStatWithNum) PRINT LPAREN Expr:expr COMMA NUM:num RPAREN SEMI {: RESULT=new PrintStatWithNum(expr, num); RESULT.setLine(exprleft); :}
			|
			(StatListStat)LBRACE StatementList:S1 RBRACE {: RESULT=new StatListStat(S1); RESULT.setLine(S1left); :}
			;


DesignatorStatement ::= (DesigStatAssingopExpr) Designator:designator EQ Expr:expr {: RESULT=new DesigStatAssingopExpr(designator, expr); RESULT.setLine(designatorleft); :}
					|
					(DesigStatAssingopError) error:e {: parser.report_error("Greska na liniji " + eleft + ". Izvrsen je oporavak od greske.", eleft);:} {: RESULT=new DesigStatAssingopError(); :}
					|
					(DesigStatWithoutActPars)Designator:designator LPAREN RPAREN {: RESULT=new DesigStatWithoutActPars(designator); RESULT.setLine(designatorleft); :}
					|
					(DesigStatWithActPars) Designator:designator LPAREN ActPars:A1 RPAREN {: RESULT=new DesigStatWithActPars(designator, A1); RESULT.setLine(designatorleft); :}
					|
					(DesigStatPlusPlus) Designator:designator PLUSPLUS {: RESULT=new DesigStatPlusPlus(designator); RESULT.setLine(designatorleft); :}
					|
					(DesigStatMinusMinus) Designator:designator MINUSMINUS {: RESULT=new DesigStatMinusMinus(designator); RESULT.setLine(designatorleft); :}
					;
//Umesto Assignop obavezno EQ u DesignatorStatement
					
Condition ::= (ConditionMore) Condition:C1 OrOperator:O2 CondTerm:C3 {: RESULT=new ConditionMore(C1, O2, C3); RESULT.setLine(C1left); :}
			|
			(ConditionTerminate) CondTerm:C1 {: RESULT=new ConditionTerminate(C1); RESULT.setLine(C1left); :}
			;
			
OrOperator ::= (OrOperator) OROR {: RESULT=new OrOperator(); :};

If1 ::= (If1) IF {: RESULT=new If1(); :};
		
Condition1 ::= (Condition1) Condition:condition {: RESULT=new Condition1(condition); RESULT.setLine(conditionleft); :};

Then1 ::= (Then1) ThenZakrpi:T1 Statement:stmt {: RESULT=new Then1(T1, stmt); RESULT.setLine(T1left); :};

Else1 ::= (ElseStmt) ELSE ElseZakrpi:E1 Statement:stmt {: RESULT=new ElseStmt(E1, stmt); RESULT.setLine(E1left); :}
		|
		(NoElseStmt) ElseZakrpi:E1 {: RESULT=new NoElseStmt(E1); RESULT.setLine(E1left); :} /*epsilon */;
		
ThenZakrpi ::= (ThenZakrpi) {: RESULT=new ThenZakrpi(); :} /* epsilon */;

ElseZakrpi ::= (ElseZakrpi) {: RESULT=new ElseZakrpi(); :} /* epsilon */;
		
CaseList ::= (CaseListMore) CASE NUM:N1 DOTDOT StatementList:S2 {: RESULT=new CaseListMore(N1, S2); RESULT.setLine(N1left); :}
			|
			(NoCaseList) {: RESULT=new NoCaseList(); :} /* epsilon */
			;
			
Designator ::= (DesignatorIdent) IDENT:name {: RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); :} 
			|
			(DesignatorDot) Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorDot(D1, I2); RESULT.setLine(D1left); :}
			|
			(DesignatorExpr) DesignatorName:designatorName LBRACKET Expr:expr RBRACKET {: RESULT=new DesignatorExpr(designatorName, expr); RESULT.setLine(designatorNameleft); :}
			;
			
DesignatorName ::= (DesignatorName) Designator:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};

Assignop ::= (Assignop) EQ {: RESULT=new Assignop(); :};

ActPars ::= (ActParsMore) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsMore(A1, E2); RESULT.setLine(A1left); :}
			|
			(ActParsTerminate) Expr:E1 {: RESULT=new ActParsTerminate(E1); RESULT.setLine(E1left); :}
			;
			
CondTerm ::= (CondTermMore) CondTerm:C1 ANDAND CondFact:C2 {: RESULT=new CondTermMore(C1, C2); RESULT.setLine(C1left); :}
			|
			(CondTermTerminate) CondFact:C1 {: RESULT=new CondTermTerminate(C1); RESULT.setLine(C1left); :}
			;
			
Term ::= (TermNoTerminate) Term:term Mulop:M1 Factor:factor {: RESULT=new TermNoTerminate(term, M1, factor); RESULT.setLine(termleft); :}
		|
		(TermTerminate) Factor:factor {: RESULT=new TermTerminate(factor); RESULT.setLine(factorleft); :}
		;
		
AddopTermList ::= (AddopTermListMore) AddopTermList:A1 Addop:operation Term:T2 {: RESULT=new AddopTermListMore(A1, operation, T2); RESULT.setLine(A1left); :}
				|
				(NoAddopTermList) {: RESULT=new NoAddopTermList(); :} /* epsilon */
				;
				
CondFact ::= (CondFactMore) Expr:prvi Relop:relop Expr:drugi {: RESULT=new CondFactMore(prvi, relop, drugi); RESULT.setLine(prvileft); :}
			|
			(CondFactTerminate) Expr:E1 {: RESULT=new CondFactTerminate(E1); RESULT.setLine(E1left); :};


				
Mulop ::= (MulMulop) MUL {: RESULT=new MulMulop(); :} 
		| 
		(DivMulop) DIV {: RESULT=new DivMulop(); :} 
		| 
		(ModMulop) MOD {: RESULT=new ModMulop(); :}
		;

Factor ::= (FactDesign) Designator:designator {: RESULT=new FactDesign(designator); RESULT.setLine(designatorleft); :} 
		|
		(FactDesignWithoutActPars)Designator:D1 LPAREN RPAREN {: RESULT=new FactDesignWithoutActPars(D1); RESULT.setLine(D1left); :}
		| 
		(FactDesignWithActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactDesignWithActPars(D1, A2); RESULT.setLine(D1left); :}
		|
		(FactNum) NUM:numConst {: RESULT=new FactNum(numConst); RESULT.setLine(numConstleft); :}
		|
		(FactChar) CHAR:charConst {: RESULT=new FactChar(charConst); RESULT.setLine(charConstleft); :}
		|
		(FactBool) BOOL:boolConst {: RESULT=new FactBool(boolConst); RESULT.setLine(boolConstleft); :}
		|
		(FactNew) NEW Type:newType {: RESULT=new FactNew(newType); RESULT.setLine(newTypeleft); :}
		|
		(FactNewArray)NEW Type:type LBRACKET Expr:expr RBRACKET {: RESULT=new FactNewArray(type, expr); RESULT.setLine(typeleft); :}
		|
		(FactExpr)LPAREN Expr:expr RPAREN {: RESULT=new FactExpr(expr); RESULT.setLine(exprleft); :}
		;
		
Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :} 
		| 
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :};

Relop ::= (RelopEqEq) EQEQ {: RESULT=new RelopEqEq(); :} 
		| 
		(RelopNotEq) NOTEQ {: RESULT=new RelopNotEq(); :} 
		| 
		(RelopGreater) GREATER {: RESULT=new RelopGreater(); :} 
		| 
		(RelopGraterEq) GREATEREQ {: RESULT=new RelopGraterEq(); :} 
		| 
		(RelopLess) LESS {: RESULT=new RelopLess(); :} 
		| 
		(RelopLessEq) LESSEQ {: RESULT=new RelopLessEq(); :};

Expr ::= (Expr11)MINUS Term:term AddopTermList:A1 {: RESULT=new Expr11(term, A1); RESULT.setLine(termleft); :}
		|
		(Expr12) Term:term AddopTermList:A1 {: RESULT=new Expr12(term, A1); RESULT.setLine(termleft); :}
		;
		

		
